//Blidar Alexandra, gr2121, sgr1, lab7, pb1
/*Creați o interfață denumită Generator<T> cu singura metodă next(T var). Implementați interfața pentru a permite 
generarea valorilor următoare în cazul aplicării asupra unor variabile de tipuri de date concrete (Integer, Character, etc.). 
Instanțierea clasei se va face în cadrul metodei main( ), care va fi poziționată într-o clasă distinctă.*/

interface  Generator <T>{
	public <T> T next(T var) ;
}


public class Generare<T> implements Generator<T> {

	public static void main(String[] args) {
	
		Generare<Integer> ob = new Generare<Integer>();
		System.out.println("Int: " + ob.next(2));
		
		Generare<Float>  ob1 = new Generare<Float>();
		System.out.println("Float: " + ob1.next(34.34));
		
		Generare<String>  ob2 = new Generare<String>();
		System.out.println("String: " + ob2.next(" unu doi trei"));
		
		
		Generare<Character>  ob3 = new Generare<Character>();
		System.out.println("Character: " + ob1.next("x"));
	}

	@Override
	public <T> T next(T var) {
		// TODO Auto-generated method stub
		return var;
	}
}




//Blidar Alexandra, gr2121, sgr1, lab7, pb2
/*Creați o clasă Calculator ce are implementate metode de adunare, scădere, înmulțire și împărțire. Metodele vor avea 
ca intrare tipuri de date generice și vor returna rezultatul conform acestor date. De exemplu, suma a doi întregi va 
returna tot un întreg, pentru două numere de tip float se va returna tot un float. Aplicarea metodelor de adunare și 
scădere este permisă și pe variabile de tip String, restul operațiilor fiind interzise pt. acest tip de date (mesaj de eroare). 
Scrieți aceeași clasă folosind supraîncărcarea metodelor. */

import java.util.StringTokenizer;

public class Calculator<T>{

	 public <T> T adunare(T var,T var2){
		if(var.getClass() == String.class)
		{
			String s = new String(var.toString()+var2.toString());
			return (T) s;
		}
		else if(var.getClass() == Integer.class) 
			return (T) (Integer)( Integer.valueOf(var.toString()) + Integer.valueOf(var2.toString()));
		else if(var.getClass() == Double.class)
			return (T) (Double)(Double.valueOf(var.toString()) + Double.valueOf(var2.toString()));
		else return null;
	}	
	
	 public <T> T scadere(T var, T var2) {
		if(var.getClass() == String.class)
		{
			StringTokenizer s = new StringTokenizer(var.toString());
			StringTokenizer s2 = new StringTokenizer(var2.toString());
			String[] sir = new String[s.countTokens()];
			int n = s.countTokens();
			for(int i = 0 ; i  < n; i ++)
				{
				sir[i] = new String();
				sir[i] = s.nextToken().toString();
				}
			
			while(s2.hasMoreTokens()) {
				
				String aux = new String();
				aux = s2.nextToken();
			
				for(int i = 0 ; i < n ; i ++)
				if(sir[i].compareTo(aux) == 0)
					{for(int j = i ; j + 1 < n; j ++)
						sir[j] = sir[j + 1];
					n--;
					sir[n] = null;
					}
				}
			StringBuffer builder = new StringBuffer();
			for(int i = 0 ; i < n;i ++) {
			    builder.append(sir[i]);
			    builder.append(" ");
			}
			String fin = builder.toString();
			return (T) fin;
		}
		else if(var.getClass() == Integer.class) 
			return (T) (Integer)( Integer.valueOf(var.toString()) - Integer.valueOf(var2.toString()));
		else if(var.getClass() == Double.class)
			return (T) (Double)(Double.valueOf(var.toString()) - Double.valueOf(var2.toString()));
		else return null;
	}
	
	 public <T> T inmultire(T var,T var2){
		if(var.getClass() == String.class)
		{
			System.out.print("\nTipul de data string nu se poate inmulti.");
			return null;
		}
		else if(var.getClass() == Integer.class) 
			return (T) (Integer)( Integer.valueOf(var.toString()) * Integer.valueOf(var2.toString()));
		else if(var.getClass() == Double.class)
			return (T) (Double)(Double.valueOf(var.toString()) * Double.valueOf(var2.toString()));
		else return null;
	}	
	 public <T> T impartire(T var,T var2){
			if(var.getClass() == String.class)
			{
				System.out.print("\nTipul de data string nu se poate imparti.");
				return null;
			}
			else if(var.getClass() == Integer.class) 
				return (T) (Integer)( Integer.valueOf(var.toString()) / Integer.valueOf(var2.toString()));
			else if(var.getClass() == Double.class)
				return (T) (Double)(Double.valueOf(var.toString()) / Double.valueOf(var2.toString()));
			else return null;
		}	
	
	public static void main(String[] args) {
		Calculator ob = new Calculator();
		
	System.out.println("Adunare");
	System.out.println(ob.adunare("Maria","Ioana"));
	System.out.println(ob.adunare(100,200));
	System.out.println(ob.adunare(23,77));
	
	System.out.println("\nScadere");
	System.out.println(ob.scadere("Maria si Ioana","Ioana"));
	System.out.println(ob.scadere(300,200));
	System.out.println(ob.scadere(438.8,20.7));
	
	
	System.out.println("\nInmultire");
	System.out.println(ob.inmultire("Maria si Ioana","Ioana"));
	System.out.println(ob.inmultire(300,2));
	System.out.println(ob.inmultire(438.8,20.7));
	
	System.out.println("\nImpartire");
	System.out.println(ob.impartire("Maria si Ioana","Ioana"));
	System.out.println(ob.impartire(300,2));
	System.out.println(ob.impartire(438.8,20.7));
	
	
	}

}





//Blidar Alexandra, gr2121, sgr1, lab7, pb4
/*Implementati o clasa numita UserFile (denumire, extensie, tip, marime in bytes, constructori, mutatori si accesori). 
Tipurile de fisiere sunt predefinite si stocate intr-un obiect Hashtable (de ex. „imagine” =>0, „text” =>1, „aplicatie” =>2, 
etc.). Creați un șir de obiecte instanțiate din această clasă și citiți de la tastatură datele aferente. Afișați toate extensiile 
specifice tipurilor de fișiere predefinite. Ordonați lista de fișiere în funcție de mărime si afișați rezultatul.*/

import java.util.Hashtable;
import java.util.Scanner;

public class UserFile implements Comparable<UserFile>{
public String denumire, extensie, tip;
public int marimeInBytes;
public String getDenumire() {
	return denumire;
}

UserFile(String den, String ext, String t, int marime){
	denumire = den;
	extensie = ext;
	tip = t;
	marimeInBytes = marime;
}

public void setDenumire(String denumire) {
	this.denumire = denumire;
}
public String getExtensie() {
	return extensie;
}
public void setExtensie(String extensie) {
	this.extensie = extensie;
}
public String getTip() {
	return tip;
}
public void setTip(String tip) {
	this.tip = tip;
}
public int getMarimeInBytes() {
	return marimeInBytes;
}
public void setMarimeInBytes(int marimeInBytes) {
	this.marimeInBytes = marimeInBytes;
}


public static void main(String[] args) {
	Scanner inner = new Scanner(System.in);
	Hashtable<String,String> tipAndExt = new Hashtable<String,String>();
	tipAndExt.put("text",".txt");
	tipAndExt.put("aplicatie",".exe");
	tipAndExt.put("imagine",".jpg");
	tipAndExt.put("document",".doc");
	
	int n = 0;
	System.out.print("Dati n= ");
	n = inner.nextInt();
	
	UserFile[] tab = new UserFile[n];
	
	for(int i = 0 ; i < n ; i ++)
	{
		System.out.print("\nFisierul " +(i+1));
		inner = new Scanner(System.in);
		
		System.out.print("\nDenumire: ");
		String den  = new String();
		den = inner.nextLine();
		
		System.out.print("\nFisier de tip aplicatie, text, document sau imagine? ");
		String tip = new String();
		tip = inner.nextLine();
		
		int mar = 0;
		System.out.print("\nMarimea fisierului in bytes (numar intreg): ");
		mar= Integer.valueOf(inner.nextLine());
		
		tab[i] = new UserFile(den,tipAndExt.get(tip),tip,mar);
		
	}
	System.out.print("\n\n");
	for(int i = 0 ; i < n; i ++)
		System.out.print("\n" + tab[i].getTip() + " => " + tab[i].getExtensie());
	
	for(int i = 0 ; i < n -1; i ++)
		for(int j = i + 1 ; j < n; j ++)
			if(tab[i].compareTo(tab[j]) > 0)
			{
				UserFile aux = tab[i];
				tab[i] = tab[j];
				tab[j] = aux;
			}
	
	for(int i = 0 ; i < n;  i++)
		System.out.print("\n\nFisierul " + (i+1) + "\nDenumire: " + tab[i].getDenumire() + "\nTip: " + tab[i].getTip() + "\nExtensie: " + tipAndExt.get(tab[i].getTip()) + "\nMarime in bytes: " + tab[i].getMarimeInBytes());
}
public int compareTo(UserFile o) {
	if(o.getMarimeInBytes() > marimeInBytes)
		return 1;
	else if(o.getMarimeInBytes() < marimeInBytes)
		return -1;
	else
	return 0;
}

}